name: Build Tauri app
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  build:
    env:
      CI: true
      DO_NOT_TRACK: 1
      CARGO_TERM_COLOR: always
    strategy:
      matrix:
        platform:
          - ubuntu-latest
          - windows-2025
          # - macos-latest
    runs-on: ${{ matrix.platform }}
    steps:
      - id: checkout
        name: Check out repository
        uses: actions/checkout@v4
      - id: tauri-dependencies
        name: Install Tauri dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev
      - id: rustup-unix
        name: Install Rust (UNIX)
        if: matrix.platform == 'ubuntu-latest' || matrix.platform == 'macos-latest'
        run: |
          curl -fsSL --tlsv1.3 https://sh.rustup.rs | bash -s -- -vy --no-modify-path
          realpath ~/.cargo/bin >> "$GITHUB_PATH"
      - id: rustup-windows
        name: Install Rust (Windows)
        if: matrix.platform == 'windows-2025'
        run: |
          rustup update
          rustup default stable-msvc
      - id: rust-macos
        name: Add macOS Rust targets (macOS only)
        if: matrix.platform == 'macos-latest'
        run: rustup target add aarch64-apple-darwin x86_64-apple-darwin
      - id: jetbrains-runtime
        name: Install JetBrains Runtime (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/setup-java@v4
        with:
          distribution: jetbrains
          java-version: 21
      - id: android-environment
        name: Configure Android SDK environment variables (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          echo "NDK_HOME=$ANDROID_NDK_HOME" >> "$GITHUB_ENV"
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
      - id: android-licenses
        name: Accept Android SDK licenses (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: yes | sdkmanager --licenses > /dev/null
      - id: rust-android
        name: Add Android Rust targets (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: rustup target add aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android
      - id: android-signing
        name: Setup Android signing (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" > keystore.properties
          echo "keyAlias=upload" >> keystore.properties
          base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
          echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties
        working-directory: frontend/src-tauri/gen/android
      - id: bun
        name: Install Bun
        uses: oven-sh/setup-bun@v2
      - id: dependencies
        name: Install app dependencies
        run: |
          bun i --frozen-lockfile
          bun i -g turbo
        working-directory: frontend
      - id: build-desktop
        name: Build app for desktop
        uses: tauri-apps/tauri-action@v0
        with:
          projectPath: ${{ github.workspace }}/frontend
          tauriScript: turbo --ui stream tauri --
          args: ${{ matrix.platform == 'macos-latest' && '-t universal-apple-darwin' || '' }}
      - id: build-android
        name: Build app for Android (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        uses: tauri-apps/tauri-action@v0
        with:
          projectPath: ${{ github.workspace }}/frontend
          tauriScript: turbo --ui stream tauri -- android
      - id: bundle-linux
        name: Bundle Linux artifact
        if: matrix.platform == 'ubuntu-latest'
        run: |
          mkdir binaries-linux
          cd binaries-linux
          for ext in AppImage deb rpm; do
            cp "$GITHUB_WORKSPACE/frontend/src-tauri/target/release/bundle/**/*.$ext" "${{ github.event.repository.name }}.$ext"
          done
        working-directory: ${{ runner.temp }}
      - id: bundle-android
        name: Bundle Android artifact
        if: matrix.platform == 'ubuntu-latest'
        run: |
          mkdir binaries-android
          cd binaries-android
          cp "$GITHUB_WORKSPACE/frontend/src-tauri/gen/android/app/build/outputs/apk/universal/release/*.apk" "${{ github.event.repository.name }}.apk"
        working-directory: ${{ runner.temp }}
      - id: bundle-windows
        name: Bundle Windows artifact
        if: matrix.platform == 'windows-2025'
        run: |
          New-Item binaries-windows -ItemType Directory
          Set-Location binaries-windows
          Copy-Item "$GITHUB_WORKSPACE/frontend/src-tauri/target/release/bundle/**/*.exe" "${{ github.event.repository.name }}.exe"
        working-directory: ${{ runner.temp }}
      - id: bundle-macos
        name: Bundle macOS artifact
        if: matrix.platform == 'macos-latest'
        run: |
          mkdir binaries-macos
          cd binaries-macos
          cp "$GITHUB_WORKSPACE/frontend/src-tauri/target/universal-apple-darwin/release/bundle/**/*.dmg" "${{ github.event.repository.name }}.dmg"
        working-directory: ${{ runner.temp }}
      - id: upload-linux
        name: Upload Linux artifact
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: binaries-linux
          path: ${{ runner.temp }}/binaries-linux
      - id: upload-android
        name: Upload Android artifact
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: binaries-android
          path: ${{ runner.temp }}/binaries-android
      - id: upload-windows
        name: Upload Windows artifact
        if: matrix.platform == 'windows-2025'
        uses: actions/upload-artifact@v4
        with:
          name: binaries-windows
          path: ${{ runner.temp }}/binaries-windows
      - id: upload-macos
        name: Upload macOS artifact
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: binaries-macos
          path: ${{ runner.temp }}/binaries-macos
